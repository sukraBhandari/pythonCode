class Node(object):
    def __init__(self, data):
        self.data = data
        self.next = None

    def printData(self):
        print self.data
        if self.next is not None:
            self.next.printData()


class LinkedList(object):
    def __init__(self):
        self.head = None

    def addToFirst(self, data):
        if self.head is None:
            self.head = Node(data)
        else:
            temp = Node(data)
            temp.next = self.head
            self.head = temp

    def addToLast(self, data):
        if self.head is None:
            self.head = Node(data)
        else:
            temp = self.head
            while temp.next is not None:
                temp = temp.next
            temp.next = Node(data)

    def addAtPosition(self, data, position):
        if self.head is None:
            return False
        else:
            temp = Node(data)
            current = self.head
            count = 0
            while count < position-1:
                current = current.next
                count+=1
            temp.next = current.next
            current.next = temp
            return True

    def removeFromFirst(self):
        if self.head is None:
            return False
        temp = self.head.next
        self.head = temp

    def removeFromLast(self):
        if self.head is None:
            return False

        if self.head.next is None:
            self.head = None
            return
        temp = self.head
        while temp is not None:
            if temp.next.next is None:
                temp.next = None
                break
            temp = temp.next

    def removeFromPosition(self, position):
        if self.head is None:
            return False
        temp = self.head
        count = 0
        while count < position - 1:
            temp = temp.next
            count+=1
        temp.next = temp.next.next

    def printData(self):
        if self.head is not None:
            self.head.printData();
